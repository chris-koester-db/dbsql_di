resources:
  jobs:
    dbsql_di:
      name: dbsql_di
      tasks:
        - task_key: dw_init
          run_if: ALL_SUCCESS
          min_retry_interval_millis: 10000
          max_retries: 2
          notebook_task:
            notebook_path: ../src/dw_init.sql
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
        - task_key: run_customermgmt_YES_NO
          depends_on:
            - task_key: dw_init
          condition_task:
            op: EQUAL_TO
            left: "{{job.parameters.run_customermgmt}}"
            right: YES
        - task_key: ingest_customermgmt_wh
          depends_on:
            - task_key: run_customermgmt_YES_NO
              outcome: "true"
          notebook_task:
            notebook_path: /Workspace/Users/chris.koester@databricks.com/.bundle/tpcdi_bundle/dev/files/src/CustomerMgmtRaw
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
        - task_key: ingest_BatchDate
          depends_on:
            - outcome: "false"
              task_key: run_customermgmt_YES_NO
            - task_key: ingest_customermgmt_wh
          min_retry_interval_millis: 10000
          run_if: AT_LEAST_ONE_SUCCESS
          max_retries: 2
          notebook_task:
            base_parameters:
              raw_schema: batchdate DATE NOT NULL COMMENT 'Batch date'
              table: BatchDate
              path: Batch*
              tgt_query: '*, cast(substring(_metadata.file_path FROM (position(''/Batch'', _metadata.file_path) + 6) FOR 1) as int) batchid'
              add_tgt_schema: ', batchid INT NOT NULL COMMENT ''Batch ID when this record was inserted'''
              tgt_db: '{{job.parameters.wh_db}}'
              filename: BatchDate.txt
            notebook_path: ../src/Ingest_Raw.sql
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
        - task_key: ingest_DimDate
          depends_on:
            - outcome: "false"
              task_key: run_customermgmt_YES_NO
            - task_key: ingest_customermgmt_wh
          min_retry_interval_millis: 10000
          notebook_task:
            warehouse_id: ${var.existing_warehouse_id}
            base_parameters:
              raw_schema: sk_dateid BIGINT NOT NULL COMMENT 'Surrogate key for the date', datevalue DATE NOT NULL COMMENT 'The date stored appropriately for doing comparisons in the Data Warehouse', datedesc STRING NOT NULL COMMENT 'The date in full written form e.g. July 7 2004', calendaryearid INT NOT NULL COMMENT 'Year number as a number', calendaryeardesc STRING NOT NULL COMMENT 'Year number as text', calendarqtrid INT NOT NULL COMMENT 'Quarter as a number e.g. 20042', calendarqtrdesc STRING NOT NULL COMMENT 'Quarter as text e.g. 2004 Q2', calendarmonthid INT NOT NULL COMMENT 'Month as a number e.g. 20047', calendarmonthdesc STRING NOT NULL COMMENT 'Month as text e.g. 2004 July', calendarweekid INT NOT NULL COMMENT 'Week as a number e.g. 200428', calendarweekdesc STRING NOT NULL COMMENT 'Week as text e.g. 2004-W28', dayofweeknum INT NOT NULL COMMENT 'Day of week as a number e.g. 3', dayofweekdesc STRING NOT NULL COMMENT 'Day of week as text e.g. Wednesday', fiscalyearid INT NOT NULL COMMENT 'Fiscal year as a number e.g. 2005', fiscalyeardesc STRING NOT NULL COMMENT 'Fiscal year as text e.g. 2005', fiscalqtrid INT NOT NULL COMMENT 'Fiscal quarter as a number e.g. 20051', fiscalqtrdesc STRING NOT NULL COMMENT 'Fiscal quarter as text e.g. 2005 Q1', holidayflag BOOLEAN COMMENT 'Indicates holidays'
              table: DimDate
              path: Batch1
              tgt_query: '*'
              tgt_db: '{{job.parameters.wh_db}}'
              filename: Date.txt
            notebook_path: ../src/Ingest_Raw.sql
            source: WORKSPACE
          max_retries: 2
          run_if: AT_LEAST_ONE_SUCCESS
        - task_key: ingest_DimTime
          depends_on:
            - task_key: run_customermgmt_YES_NO
              outcome: "false"
            - task_key: ingest_customermgmt_wh
          run_if: AT_LEAST_ONE_SUCCESS
          min_retry_interval_millis: 10000
          notebook_task:
            base_parameters:
              tgt_query: '*'
              tgt_db: '{{job.parameters.wh_db}}'
              filename: Time.txt
              raw_schema: sk_timeid BIGINT NOT NULL COMMENT 'Surrogate key for the time', timevalue STRING NOT NULL COMMENT 'The time stored appropriately for doing', hourid INT NOT NULL COMMENT 'Hour number as a number e.g. 01', hourdesc STRING NOT NULL COMMENT 'Hour number as text e.g. 01', minuteid INT NOT NULL COMMENT 'Minute as a number e.g. 23', minutedesc STRING NOT NULL COMMENT 'Minute as text e.g. 01:23', secondid INT NOT NULL COMMENT 'Second as a number e.g. 45', seconddesc STRING NOT NULL COMMENT 'Second as text e.g. 01:23:45', markethoursflag BOOLEAN COMMENT 'Indicates a time during market hours', officehoursflag BOOLEAN COMMENT 'Indicates a time during office hours'
              table: DimTime
              path: Batch1
            notebook_path: ../src/Ingest_Raw.sql
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
          max_retries: 2
        - task_key: ingest_FinWire
          depends_on:
            - outcome: "false"
              task_key: run_customermgmt_YES_NO
            - task_key: ingest_customermgmt_wh
          run_if: AT_LEAST_ONE_SUCCESS
          max_retries: 2
          min_retry_interval_millis: 10000
          notebook_task:
            base_parameters:
              path: Batch1
              tgt_query: '*, substring(value, 16, 3) rectype'
              add_tgt_schema: ', rectype STRING COMMENT ''Indicates the type of table into which this record will eventually be parsed: CMP FIN or SEC'''
              tgt_db: '{{job.parameters.wh_db}}_stage'
              filename: FINWIRE[0-9][0-9][0-9][0-9]Q[1-4]
              part: PARTITIONED BY (rectype)
              raw_schema: value STRING COMMENT 'Pre-parsed String Values of all FinWire files'
              table: FinWire
            notebook_path: ../src/Ingest_Raw.sql
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
        - task_key: ingest_StatusType
          depends_on:
            - task_key: run_customermgmt_YES_NO
              outcome: "false"
            - task_key: ingest_customermgmt_wh
          max_retries: 2
          notebook_task:
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
            base_parameters:
              filename: StatusType.txt
              raw_schema: st_id STRING NOT NULL COMMENT 'Status code', st_name STRING NOT NULL COMMENT 'Status description'
              table: StatusType
              path: Batch1
              tgt_query: '*'
              tgt_db: '{{job.parameters.wh_db}}'
            notebook_path: ../src/Ingest_Raw.sql
          run_if: AT_LEAST_ONE_SUCCESS
          min_retry_interval_millis: 10000
        - task_key: ingest_TaxRate
          depends_on:
            - outcome: "false"
              task_key: run_customermgmt_YES_NO
            - task_key: ingest_customermgmt_wh
          run_if: AT_LEAST_ONE_SUCCESS
          min_retry_interval_millis: 10000
          max_retries: 2
          notebook_task:
            base_parameters:
              filename: TaxRate.txt
              raw_schema: tx_id STRING NOT NULL COMMENT 'Tax rate code', tx_name STRING NOT NULL COMMENT 'Tax rate description', tx_rate FLOAT NOT NULL COMMENT 'Tax rate'
              table: TaxRate
              path: Batch1
              tgt_query: '*'
              tgt_db: '{{job.parameters.wh_db}}'
            notebook_path: ../src/Ingest_Raw.sql
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
        - task_key: ingest_TradeType
          depends_on:
            - task_key: run_customermgmt_YES_NO
              outcome: "false"
            - task_key: ingest_customermgmt_wh
          notebook_task:
            base_parameters:
              tgt_db: '{{job.parameters.wh_db}}'
              filename: TradeType.txt
              raw_schema: tt_id STRING NOT NULL COMMENT 'Trade type code', tt_name STRING NOT NULL COMMENT 'Trade type description', tt_is_sell INT NOT NULL COMMENT 'Flag indicating a sale', tt_is_mrkt INT NOT NULL COMMENT 'Flag indicating a market order'
              table: TradeType
              path: Batch1
              tgt_query: '*'
            notebook_path: ../src/Ingest_Raw.sql
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
          max_retries: 2
          min_retry_interval_millis: 10000
          run_if: AT_LEAST_ONE_SUCCESS
        - task_key: ingest_industry
          depends_on:
            - outcome: "false"
              task_key: run_customermgmt_YES_NO
            - task_key: ingest_customermgmt_wh
          min_retry_interval_millis: 10000
          run_if: AT_LEAST_ONE_SUCCESS
          notebook_task:
            base_parameters:
              filename: Industry.txt
              raw_schema: in_id STRING NOT NULL COMMENT 'Industry code', in_name STRING NOT NULL COMMENT 'Industry description', in_sc_id STRING NOT NULL COMMENT 'Sector identifier'
              table: industry
              path: Batch1
              tgt_query: '*'
              tgt_db: '{{job.parameters.wh_db}}'
            notebook_path: ../src/Ingest_Raw.sql
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
          max_retries: 2
        - task_key: Silver_DimBroker
          depends_on:
            - task_key: ingest_DimDate
          min_retry_interval_millis: 10000
          notebook_task:
            warehouse_id: ${var.existing_warehouse_id}
            notebook_path: ../src/DimBroker.sql
            source: WORKSPACE
          max_retries: 2
          run_if: ALL_SUCCESS
        - task_key: Stage_DimCustomerStg
          depends_on:
            - task_key: ingest_BatchDate
            - task_key: ingest_StatusType
          notebook_task:
            notebook_path: ../src/DimCustomerStg.sql
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
          min_retry_interval_millis: 10000
          run_if: ALL_SUCCESS
          max_retries: 2
        - task_key: Silver_DimAccount
          depends_on:
            - task_key: Silver_DimBroker
            - task_key: Stage_DimCustomerStg
          run_if: ALL_SUCCESS
          max_retries: 2
          min_retry_interval_millis: 10000
          notebook_task:
            notebook_path: ../src/DimAccount.sql
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
        - task_key: Gold_FactCashBalances
          depends_on:
            - task_key: Silver_DimAccount
          notebook_task:
            notebook_path: ../src/FactCashBalances.sql
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
          min_retry_interval_millis: 10000
          max_retries: 2
          run_if: ALL_SUCCESS
        - task_key: Silver_Prospect
          depends_on:
            - task_key: Stage_DimCustomerStg
          run_if: ALL_SUCCESS
          max_retries: 2
          min_retry_interval_millis: 10000
          notebook_task:
            notebook_path: ../src/Prospect.sql
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
        - task_key: Silver_DimCustomer
          depends_on:
            - task_key: ingest_TaxRate
            - task_key: Silver_Prospect
          min_retry_interval_millis: 10000
          notebook_task:
            notebook_path: ../src/DimCustomer.sql
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
          run_if: ALL_SUCCESS
          max_retries: 2
        - task_key: Silver_DimCompany
          depends_on:
            - task_key: ingest_FinWire
            - task_key: ingest_StatusType
            - task_key: ingest_industry
          min_retry_interval_millis: 10000
          max_retries: 2
          run_if: ALL_SUCCESS
          notebook_task:
            notebook_path: ../src/DimCompany.sql
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
        - task_key: Silver_DimSecurity
          depends_on:
            - task_key: Silver_DimCompany
          min_retry_interval_millis: 10000
          notebook_task:
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
            notebook_path: ../src/DimSecurity.sql
          run_if: ALL_SUCCESS
          max_retries: 2
        - task_key: Gold_FactWatches
          depends_on:
            - task_key: Silver_DimSecurity
            - task_key: Stage_DimCustomerStg
          notebook_task:
            notebook_path: ../src/FactWatches.sql
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
          min_retry_interval_millis: 10000
          max_retries: 2
          run_if: ALL_SUCCESS
        - task_key: Silver_DimTrade
          depends_on:
            - task_key: ingest_TradeType
            - task_key: Silver_DimSecurity
            - task_key: Silver_DimAccount
          notebook_task:
            notebook_path: ../src/DimTrade.sql
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
          run_if: ALL_SUCCESS
        - task_key: Silver_FactHoldings
          depends_on:
            - task_key: Silver_DimTrade
          run_if: ALL_SUCCESS
          notebook_task:
            warehouse_id: ${var.existing_warehouse_id}
            notebook_path: ../src/FactHoldings.sql
            source: WORKSPACE
        - task_key: Silver_Financial
          depends_on:
            - task_key: Silver_DimCompany
          run_if: ALL_SUCCESS
          notebook_task:
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
            notebook_path: ../src/Financial.sql
        - task_key: Gold_FactMarketHistory
          depends_on:
            - task_key: Silver_DimSecurity
            - task_key: Silver_Financial
          notebook_task:
            notebook_path: ../src/FactMarketHistory.sql
            source: WORKSPACE
            warehouse_id: ${var.existing_warehouse_id}
          run_if: ALL_SUCCESS
      description: The ***run_customermgmt*** paramater accepts either ***YES*** or ***NO***.  If this XML file has already been ingested, the *dw_init* task does **NOT** remove it (since it is kind of a pain). Therefore, if you want to disable this task and just keep the existing historical customermgmt staging table then change to ***NO***.  It is set to ***YES*** by default.
      parameters:
        - default: main
          name: catalog
        - default: YES
          name: run_customermgmt
        - default: "10"
          name: scale_factor
        - default: /Volumes/tpcdi/tpcdi_raw_data/tpcdi_volume/
          name: tpcdi_directory
        - default: dbsql_di
          name: wh_db
      max_concurrent_runs: 1
